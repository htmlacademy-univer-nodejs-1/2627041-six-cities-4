openapi: 3.1.0
info:
  title: Шесть городов API
  version: 1.0.0
  description: REST API для работы с предложениями по аренде, пользователями и комментариями
  
tags:
  - name: offers
    description: Действия с предложениями.
  - name: favorite
    description: Действия с избранными предложениями.
  - name: comments
    description: Действия с комментариями.
  - name: user
    description: Действия с пользователем.
paths:
  "/offers":
    get:
      tags:
        - offers
      summary: Получить список предложений.
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            default: 60
      responses:
        "200":
          description: Список предложений
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/OfferMinimumWithId"
    post:
      tags:
        - offers
      summary: Создание нового предложения
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Offer"
      responses:
        "201":
          description: Успешное создание
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OfferWithId"
        "400":
          description: Ошибка валидации
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
        "401":
          description: Ошибка авторизации
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthError"
  "/offers/{offerId}":
    get:
      tags:
        - offers
      summary: Получение одного предложения
      parameters:
        - in: path
          name: offerId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Информация о предложении
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OfferWithId"
    put:
      tags:
        - offers
      summary: Обновление предложения
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: offerId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Offer"
      responses:
        "200":
          description: Обновлённое предложение
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OfferWithId"
        "400":
          description: Ошибка валидации
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
        "401":
          description: Ошибка авторизации
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthError"
        "403":
          description: Нет доступа к редактированию этого предложения
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/AccessDeny"
    delete:
      tags:
        - offers
      summary: Удаление предложения
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: offerId
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Успешное удаление
        "401":
          description: Ошибка авторизации
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthError"
        "403":
          description: Нет доступа к удалению этого предложения
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/AccessDeny"
  "/comments/{offerId}":
    get:
      tags:
        - comments
      summary: Список комментариев к предложению
      responses:
        "200":
          description: Список комментариев
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Comment"
  "/comments/":                
    post:
      tags:
        - comments
      summary: Добавить комментарий
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddComment"
      responses:
        "201":
          description: Созданный комментарий
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"
        "400":
          description: Ошибка валидации
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
        "401":
          description: Ошибка авторизации
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthError"
  /auth/register:
    post:
      tags:
        - user
      summary: Регистрация нового пользователя
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddUserModel"
      responses:
        "201":
          description: Пользователь создан
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Ошибка валидации
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
  /auth/login:
    post:
      tags:
        - user
      summary: Вход пользователя
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCredentials"
      responses:
        "200":
          description: Успешный вход
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  email:
                    type: string
        "403":
          description: Неверный логин или пароль
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessDeny"
  /auth/check:
    get:
      tags:
        - user
      summary: Проверка авторизации пользователя
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Информация о пользователе
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: Пользователь не авторизован
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthError"
  /auth/{userId}/avatar:
    post:
      tags:
        - user
      summary: Загрузить аватар пользователя
      parameters:
        - name: userId
          in: path
          description: ID пользователя
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                avatar:
                  type: string
                  format: binary
                  description: The avatar image file to upload.
      responses:
        '201':
          description: Успешная загрузка аватара
  "/offers/premium/{city}":
    get:
      tags:
        - offers
      summary: Премиальные предложения по городу
      parameters:
        - in: path
          name: city
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Список премиальных предложений
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/OfferMinimumWithId"
  /favorites:
    get:
      tags:
        - favorite
      summary: Список избранных предложений
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Избранные предложения
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/OfferMinimumWithId"
  "/favorites/{offerId}":
    post:
      tags:
        - favorite
      summary: Добавить предложение в избранные
      security:
        - bearerAuth: []
      parameters:
        - name: offerId
          in: path
          description: Уникальный идентификатор предложения
          required: true
          schema:
            type: string
            example: 6840963aa9ff5195cb00c6b1
      responses:
        "200":
          description: Предложение добавлено в избранное
        "401":
          description: Ошибка авторизации
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthError"
    delete:
      tags:
        - favorite
      summary: Убрать предложение из избранного
      security:
        - bearerAuth: []
      parameters:
        - name: offerId
          in: path
          description: Уникальный идентификатор предложения
          required: true
          schema:
            type: string
            example: 6840963aa9ff5195cb00c6b1
      responses:
        "200":
          description: Предложение удалено из избранного
        "401":
          description: Ошибка авторизации
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthError"
components:
  schemas:
    UserCredentials:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
    User:
      type: object
      required:
        - name
        - email
        - password
        - type
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        avatar:
          type: string
          format: uri
          readOnly: true
        type:
          type: string
          enum:
            - обычный
            - pro
    AddUserModel:
      allOf:
        - type: object
          properties:
            password:
              type: string
        - $ref: "#/components/schemas/User"
    OfferMinimum:
      type: object
      properties:
        title:
          type: string
          example: Beautiful & luxurious studio at great location
        type:
          type: string
          example: apartment
        rentCost:
          type: number
          example: 120
        isFavorite:
          type: boolean
          example: false
        isPremium:
          type: boolean
          example: false
        rate:
          type: number
          example: 4
        previewLink:
          type: string
          format: uri
          example: https://example.com
        date:
          type: string
          format: date-time
        commentsCount:
          type: number
          readOnly: true
          example: 4
        city:
          type: string
          example: "Paris"
    OfferMinimumWithId:
      allOf:
        - type: object
          properties:
            id:
              type: string
        - $ref: "#/components/schemas/OfferMinimum"
    Offer:
      allOf:
        - $ref: "#/components/schemas/OfferMinimum"
        - type: object
          properties:
            description:
              type: string
            photoLinks:
              type: array
              items:
                type: string
                format: uri
            roomsCount:
              type: integer
            personCount:
              type: integer
            rentCost:
              type: integer
            goods:
              type: array
              items:
                type: string
            authorId:
                type: string
                writeOnly: true
            author: 
              $ref: "#/components/schemas/User"
            location:
              $ref: "#/components/schemas/Location"
    OfferWithId:
      allOf:
        - type: object
          properties:
            id:
              type: string
        - $ref: "#/components/schemas/Offer"
    AddComment:
      type: object
      required:
        - text
        - rating
        - author
      properties:
        text:
          type: string
        offerId:
          type: string
        rating:
          type: integer
        userId:
          type: string
    Comment:
      type: object
      properties:
        id:
          type: string
        text:
          type: string
        rating:
          type: number
        postDate:
          type: string
          format: date-time
        user:
          $ref: "#/components/schemas/User"  
    Location:
      type: object
      properties:
        latitude:
          type: number
          example: 52.35514938496378
        longitude:
          type: number
          example: 4.673877537499948
    ValidationError:
      type: object
      properties:
        errorType:
          type: string
          example: COMMON_ERROR
        message:
          type: string
          example: Validation Error.
    AccessDeny:
      type: object
      properties:
        errorType:
          type: string
          example: COMMON_ERROR
        message:
          type: string
          example: Access deny.
    AuthError:
      type: object
      properties:
        errorType:
          type: string
          example: COMMON_ERROR
        message:
          type: string
          example: AuthError.
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT 

servers:
  - url: http://127.0.0.1:8080